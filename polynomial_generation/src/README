Features for usability
----------------------

1. Generalize variables to allow more than 2 atoms (i.e., not just distance
   based, but allowing for angles and dihedrals). Include a warning about
   not violating the bonding topology through the permutational invariance.
   Perhaps consider two functions: `add_permutable_variable` and
   `add_nonpermutable_variable`.

2. Do something about the printing of the variable.
   Is there a reason it isn't formatted for C?


Tips for running `poly-gen_mb-nrg.pl`
-------------------------------------

- In input, the number of atoms in a molecule must be explicitly stated, even if there is only one
  - correct: O1H2 for water, atoms names are converted to Oa Ha1 Ha2
  - will fail: OH2
- The distances and atom labels are case sensitive: CL does not match Cl
- The molecule order given in the input file is used to assign fragment ids
  `add_molecule['H1F1']` # becomes H1a and F1a
  `add_molecule['O1']`   # becomes O1b
  The variable names would then be assigned as:
  `add_variable['H1', 'a', 'F1', 'a', 'x-intra-HF']`
  `add_variable['H1', 'a', 'O1', 'b', 'x-HO']`
  `add_variable['F1', 'a', 'O1', 'b', 'x-FO']`


Notes on assumptions of the code
--------------------------------

- Permutational equivalence determined by atom name. If there are two types of permutationally inequivalent atoms, they must have different names.
- Permutations are only allowed between:
  - Fragements which are equivalent in composition
  - Equivalent atoms within fragments. Note, this condition is not strictly necessary (i.e., could allow permutations between any equivalent atom, regardless of fragment membership), but is what was used for HBB2-pol/MB-pol

How to use the code : 
--------------------------------

Step 1. Generate polynomials 

./poly-gen-mb-nrg.pl [order] [input_file] > [log_file]
# This generates the polynomial files:
$  poly-nogrd.maple         # file without gradients 
$  poly-grd.maple           # file with gradients
$  poly-model.h             # header file 
$  vars.cpp                 # contains variable definitions  
$  poly-direct.cpp          # direct evaluation of polynomials (without symmetrization)


Step 2. Symmetrization by Maple
$  maple poly-grd.maple      # This generates the *.c file for polynomial evaluation after symmetrization through maple, with gradients  
$  maple poly-nogrd.maple    # This generates the *.c file for polynomial evaluation after symmetrization through maple


Step 3. Clean up .c files 
$  clean-maple-c.pl < *.c > *.cpp      # This converts the .c formatting to .cpp formatting 
 
