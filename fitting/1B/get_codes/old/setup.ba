#!/bin/bash

#usage : ./setup.ba poly_model.h poly_direct.cpp poly_grd.cpp poly_no-grd.cpp poly_gen_input.in degree coulomb_type(0/1) destination
#          $0		$1		$2		$3		$4	     $5           $6        $7               $8

# find filters: if present, create filters/v_xx

if [ "$#" -ne 8 ]; then
	echo "usage: ./setup.ba poly_file_1 poly_file_2 poly_file_3 poly_file_4 poly_gen_input.in #deg coulomb_type_var? destination"
	exit 1
fi

nonlinear_parameter_types=`cat $5 | tr "'" "\n" | grep "intra" | sort | uniq | tr "-" "_" `
nonlinear_k_params=`echo $nonlinear_parameter_types | tr "x" "k" ` 
nonlinear_d_params=`echo $nonlinear_parameter_types | tr "x" "d" `

num_nonlin_params=`echo $nonlinear_parameter_types | wc | awk '{print $2*2}'`

func_type_str="normal"
if [ "$7" -ne 0 ]; then
	func_type_str="coulombic"
fi

template_dir="$(pwd)/../templates/$func_type_str"
echo $template_dir

monomer_type=`head -1 $5 | tr '[' '\n' | tail -1 | tr "'" " " | awk '{print $1}' `
atom_types=`echo $monomer_type | sed "s/[0-9]*//g" | sed 's/\(.\)/\1\n/g' `
atm_types=`echo $monomer_type | sed "s/[0-9]*//g" `
atom_numbs=`echo $monomer_type | tr -d [:alpha:] `
num_types=`echo $monomer_type | tr -d [:alpha:] | wc | awk '{print $3 - 1}' `
total_atoms=`echo $monomer_type | tr -d [:alpha:] | sed 's/\(.\)/\1\n/g' | awk '{sum += $1} END {print sum}' `
basis_count=`echo " $total_atoms * $total_atoms / 2 - $total_atoms /2 " | bc `
#basis_count=`echo " $total_atoms * $total_atoms / 2 - $total_atoms /2 " | bc -l | tr "." " " | awk '{print $1}' `

echo $monomer_type

poly_dir="$8/$monomer_type/$func_type_str/$6"

if [[ ` grep "monomial_filter" $5 ` ]]; then

	echo "Enter Filter Version Number: "
	read version_num
        
	echo "filters present, version number: " $version_num
	poly_dir="$poly_dir/filters/v_$version_num"

	if [ -d $poly_dir ]; then
		echo "WARNING-DIRECTORY EXISTS. CONTINUE? [Y/N]"
		read answer
		if [ ! $answer == "Y" ]; then
			echo "Exiting setup"
			exit 1;
		fi
	fi
fi

mkdir -p $poly_dir

# directories have been created
#
# next, use polynomials to generate fitting codes

cp $1 $2 $3 $4 $poly_dir
cp $template_dir/* $poly_dir

cd $poly_dir

sed -i "s/h3o/$monomer_type/g" eval-1b-pot.cpp
sed -i "s/h3o/$monomer_type/g" eval-1b-pot-wgrads.cpp
sed -i "s/h3o/$monomer_type/g" fit-1b-polynomials.cpp
sed -i "s/h3o/$monomer_type/g" stuff.h
sed -i "s/h3o/$monomer_type/g" stuff.cpp
sed -i "s/h3o/$monomer_type/g" training-set.cpp
sed -i "s/h3o/$monomer_type/g" training-set.h
sed -i "s/h3o/$monomer_type/g" fit-utils.cpp
sed -i "s/h3o/$monomer_type/g" fit-utils.h

sed -i "s/h3o/$monomer_type/g" x1b-v1.cpp
sed -i "s/h3o/$monomer_type/g" x1b-v1.h
sed -i "s/h3o/$monomer_type/g" x1b-v1x.cpp
sed -i "s/h3o/$monomer_type/g" x1b-v1x.h

num_crds=`echo "$total_atoms * 3" | bc `
#num_crds=`echo $monomer_type | tr -d [:alpha:] | sed 's/\(.\)/\1\n/g' | awk '{sum += $1} END {print sum*3}'  `

sed -i "s/12/$num_crds/g" eval-1b-pot-wgrads.cpp
sed -i "s/xyz\[12/xyz\[$num_crds/g" training-set.h

sed -i "s/xyz\[12/xyz\[$num_crds/g" x1b-v1.cpp
sed -i "s/xyz\[12/xyz\[$num_crds/g" x1b-v1x.cpp
sed -i "s/xyz\[12/xyz\[$num_crds/g" x1b-v1.h
sed -i "s/xyz\[12/xyz\[$num_crds/g" x1b-v1x.h

mv poly-model.h poly-1b-v1x.h
sed -i "s/POLY_MODEL/POLY_1B_V1X/g" poly-1b-v1x.h
sed -i "s/poly_model/poly_1b_v1x/g" poly-1b-v1x.h
sed -i "s/mb_system/$monomer_type/g" poly-1b-v1x.h

mv poly-grd.cpp poly-1b-v1x.cpp
sed -i "s/poly_model/poly_1b_v1x/g" poly-1b-v1x.cpp
sed -i "s/poly-model/poly-1b-v1x/g" poly-1b-v1x.cpp
sed -i "s/mb_system/$monomer_type/g" poly-1b-v1x.cpp

mv poly-nogrd.cpp poly-1b-v1x-nogrd.cpp
sed -i "s/poly_model/poly_1b_v1x/g" poly-1b-v1x-nogrd.cpp
sed -i "s/poly-model/poly-1b-v1x/g" poly-1b-v1x-nogrd.cpp
sed -i "s/mb_system/$monomer_type/g" poly-1b-v1x-nogrd.cpp

# change x1b_v1.... classes to match the new monomer type
#
# ...starting with x1b_v1.h

sed -i "s/num_nonlinear_params = 4/num_nonlinear_params = $num_nonlin_params/g" x1b-v1.h

head -41 x1b-v1.h >> x1b_v1.h_head
tail -7 x1b-v1.h >> x1b_v1.h_tail

for arg in $nonlinear_k_params
do
	echo "    double $arg; " >> x1b_v1_mid
done

for arg in $nonlinear_d_params
do
	echo "    double $arg; " >> x1b_v1_mid
done

cat x1b_v1.h_head x1b_v1_mid x1b_v1.h_tail > x1b-v1.h
rm x1b_v1.h_head x1b_v1.h_tail x1b_v1_mid

# next, change the x1b_v1.cpp file
grep "p\[" poly-direct.cpp > evpoly
num_polynomials=`head -1 evpoly | head -1 | tr "[" "\n" | tail -1 | tr "]" " " | awk '{print $1}'`
num_lines=`head -1 evpoly | head -1 | tr "[" "\n" | tail -1 | tr "]" " " | awk '{print $1+ 1}'`
head -$num_lines evpoly | tail -$num_polynomials > polynomials
rm evpoly

# build separate sections of x1b_v1.cpp ... note: this is a nightmare

sed -i "s/npoly = 50/npoly = $num_polynomials/g" x1b-v1.cpp
head -36 x1b-v1.cpp > x1b_v1_head
tail -217 x1b-v1.cpp > x1b_v1_tail
head -29 x1b_v1_tail > x1b_v1_tail_head
tail -183 x1b_v1_tail > x1b_v1_tail_tail

for arg in $nonlinear_d_params
do
	echo "    $arg = 2.0;" >> x1b_v1_tail_head
done

for arg in $nonlinear_k_params
do
	echo "    $arg = 1.0;" >> x1b_v1_tail_head
done

head -48 x1b_v1_tail_tail > x1b_v1_tail_tail_head
echo "double x1b_v1::basis(const double xyz[$num_crds], double * mmm) const" >> x1b_v1_tail_tail_head
echo "{" >> x1b_v1_tail_tail_head

type_index=0
atom_index=0

for arg in $atom_types
do
	specific_atom_count=${atom_numbs:$type_index:1}
	for (( i = 0; i < $specific_atom_count; i++ ))
	do
		label="$arg""$i"
		displacement=`echo " $atom_index * 3 " | bc -l`
		echo "    const double* $label = xyz + $displacement;" >> x1b_v1_tail_tail_head
		atom_index=$(( atom_index+1 ))
	done
	type_index=$(( type_index+1 ))
done

echo "    double v[$basis_count];" >> x1b_v1_tail_tail_head

echo "basis function halfway done" 

# fill in the basis functions

basis_index=0
count_a=0

echo $atom_types

for arg_a in $atom_types
do
	specific_atom_count_a=${atom_numbs:count_a:1}
	for (( i = 0; i < $specific_atom_count_a; i++ ))
	do
		count_b=$count_a
		while [ $count_b -lt $num_types ]
		do
			arg_b=${atm_types:count_b:1}
			specific_atom_count_b=${atom_numbs:count_b:1}
			for (( j = 0; j < $specific_atom_count_b; j++ ))
			do
				if [[ "$i" -eq "$j" && "$arg_a" == "$arg_b" ]];
				then
					continue
				elif [[ "$j" -lt "$i" && "$arg_a" == "$arg_b" ]];
				then
					continue
				else
					dist_str="distance($arg_a$i, $arg_b$j)"
					force_var="k_intra_$arg_a$arg_b"
					dist_var="d_intra_$arg_a$arg_b"
		
					echo "    v[$basis_index] = var_intra($force_var, $dist_str, $dist_var);" >> x1b_v1_tail_tail_head
					basis_index=$((basis_index + 1))	
				fi
			done
			count_b=$(( count_b + 1 ))
		done
	done
	count_a=$(( count_a + 1 ))
done



echo "    evpoly(v,mmm);" >> x1b_v1_tail_tail_head
echo "    return 0;" >> x1b_v1_tail_tail_head
echo "}" >> x1b_v1_tail_tail_head
echo " " >> x1b_v1_tail_tail_head

cat x1b_v1_head polynomials x1b_v1_tail_head x1b_v1_tail_tail_head > x1b-v1.cpp
rm x1b_v1_head x1b_v1_tail x1b_v1_tail_head x1b_v1_tail_tail x1b_v1_tail_tail_head polynomials

#basis function written, next-as_poly_dat functionality

echo "void x1b_v1::as_poly_dat(std::ostream& os) const" >> x1b-v1.cpp
echo "{" >> x1b-v1.cpp
echo "    using namespace std;">> x1b-v1.cpp
echo "    std::cout << \" npoly = \" << npoly ; " >> x1b-v1.cpp
echo "    ios::fmtflags saved_flags = os.flags();" >> x1b-v1.cpp
echo "    os << setprecision(15) << scientific;" >> x1b-v1.cpp
echo " " >> x1b-v1.cpp

for arg in $nonlinear_d_params
do
    echo "    os << \"$arg\" << setw(22) << $arg << \" // A^(-1)\n\";" >> x1b-v1.cpp
done

for arg in $nonlinear_k_params
do
    echo "    os << \"$arg\" << setw(22) << $arg << \" // A^(-1)\n\";" >> x1b-v1.cpp
done

echo "    os << \"polynomials: \n\";" >> x1b-v1.cpp

echo "    std::cout << \"npoly = \" << npoly << \" // \n\";" >> x1b-v1.cpp
echo "    unsigned n(0);" >> x1b-v1.cpp
echo "    for (n = 0; n + 1 < npoly; ++n){" >> x1b-v1.cpp
echo "        os << std::setw(22) << m_poly[n] << \" \" << n << \" // \" << '\n';" >> x1b-v1.cpp
echo "    }" >> x1b-v1.cpp
echo "    os <<  std::setw(22) << m_poly[n] << \" \" << n << \" // \" << \"\n\n\";" >> x1b-v1.cpp
echo "    os << \"}\n\";" >> x1b-v1.cpp
echo "    os.flags(saved_flags);" >> x1b-v1.cpp
echo "}" >> x1b-v1.cpp
echo " " >> x1b-v1.cpp
echo "//----------------------------------------------------------------------------//" >> x1b-v1.cpp
echo " " >> x1b-v1.cpp

#write load_poly_dat codes

echo "void x1b_v1::load_poly_dat(const char* fn)" >> x1b-v1.cpp
echo "{" >> x1b-v1.cpp
echo "    assert(fn);" >> x1b-v1.cpp
echo "    std::ifstream infile(fn);" >> x1b-v1.cpp
echo "    std::string line; " >> x1b-v1.cpp
echo "    bool polynomial_flag = false;" >> x1b-v1.cpp
echo "    while (std::getline(infile, line)) " >> x1b-v1.cpp
echo "    {" >> x1b-v1.cpp
echo "        std::string identifier;">> x1b-v1.cpp
echo "        std::istringstream iss(line); " >> x1b-v1.cpp
echo "        iss >> identifier; " >> x1b-v1.cpp

for arg in $nonlinear_d_params
do
    echo "        if (identifier == \"$arg\") iss >> $arg;" >> x1b-v1.cpp
done

for arg in $nonlinear_k_params
do
    echo "        if (identifier == \"$arg\") iss >> $arg;" >> x1b-v1.cpp
done

echo "        if (polynomial_flag == true){" >> x1b-v1.cpp
echo "            int poly_num; " >> x1b-v1.cpp
echo "            iss >> poly_num; " >> x1b-v1.cpp
echo "            std::istringstream identifier_to_poly(identifier); " >> x1b-v1.cpp
echo "            identifier_to_poly >> m_poly[poly_num]; " >> x1b-v1.cpp
echo "            if (poly_num == npoly - 1) polynomial_flag = false; " >> x1b-v1.cpp
echo "        }" >> x1b-v1.cpp
echo "        if (polynomial_flag == false && identifier == \"polynomials:\") polynomial_flag = true; " >> x1b-v1.cpp
echo "    }" >> x1b-v1.cpp
echo "}" >> x1b-v1.cpp
echo " " >> x1b-v1.cpp
echo "//----------------------------------------------------------------------------//" >> x1b-v1.cpp
echo " " >> x1b-v1.cpp
echo "void x1b_v1::set_nonlinear_parameters(const double* xxx)" >> x1b-v1.cpp
echo "{" >> x1b-v1.cpp
for arg in $nonlinear_k_params
do
	echo "    $arg = *xxx++;" >> x1b-v1.cpp
done

for arg in $nonlinear_d_params
do
	echo "    $arg = *xxx++;" >> x1b-v1.cpp
done
echo "}" >> x1b-v1.cpp
echo " " >> x1b-v1.cpp
echo "//----------------------------------------------------------------------------//" >> x1b-v1.cpp
echo " " >> x1b-v1.cpp
echo "void x1b_v1::get_nonlinear_parameters(double* xxx) const" >> x1b-v1.cpp
echo "{" >> x1b-v1.cpp
for arg in $nonlinear_k_params
do
	echo "    *xxx++ = $arg;" >> x1b-v1.cpp
done

for arg in $nonlinear_d_params
do
	echo "    *xxx++ = $arg;" >> x1b-v1.cpp
done
echo "}" >> x1b-v1.cpp
echo " " >> x1b-v1.cpp
echo "//----------------------------------------------------------------------------//" >> x1b-v1.cpp
echo " " >> x1b-v1.cpp
echo "bool x1b_v1::nonlinear_parameters_out_of_range() const" >> x1b-v1.cpp
echo "{" >> x1b-v1.cpp
echo "    const double k_min = 0.0;" >> x1b-v1.cpp
echo "    const double k_max = 3.0;" >> x1b-v1.cpp
echo "    return" >> x1b-v1.cpp
for arg in $nonlinear_d_params
do
	echo "        $arg < 0 || " >> x1b-v1.cpp
done
for arg in $nonlinear_k_params
do
	echo "        $arg < k_min || $arg > k_max || " >> x1b-v1.cpp
done
echo "        k_min == k_max; " >> x1b-v1.cpp
echo "}" >> x1b-v1.cpp
echo "}" >> x1b-v1.cpp

#now that x1b-v1.cpp is done, move on to rewriting x1b-v1x.h
head -23 x1b-v1x.h > x1b_v1x_h_head
tail -14 x1b-v1x.h > x1b_v1x_h_tail
for arg in $nonlinear_d_params
do
	echo "    double $arg;" >> x1b_v1x_h_head
done
for arg in $nonlinear_k_params
do
	echo "    double $arg;" >> x1b_v1x_h_head
done
cat x1b_v1x_h_head x1b_v1x_h_tail > x1b-v1x.h
rm x1b_v1x_h_head x1b_v1x_h_tail

# last xi file; x1b-v1x.cpp modifications
head -110 x1b-v1x.cpp > x1b_v1x_cpp_head

type_index=0
atom_index=0

for arg in $atom_types
do
	specific_atom_count=${atom_numbs:$type_index:1}
	for (( i = 0; i < $specific_atom_count; i++ ))
	do
		label="$arg""$i"
		displacement=`echo " $atom_index * 3 " | bc -l`
		echo "    const double* $label = w1 + $displacement;" >> x1b_v1x_cpp_head
		atom_index=$(( atom_index+1 ))
	done
	type_index=$(( type_index+1 ))
done

echo "    double x[$basis_count];" >> x1b_v1x_cpp_head

echo "operator() in x1b-v1x.cpp halfway done"

# fill in the basis functions

basis_index=0
count_a=0

for arg_a in $atom_types
do
	specific_atom_count_a=${atom_numbs:count_a:1}
	for (( i = 0; i < $specific_atom_count_a; i++ ))
	do
		count_b=$count_a
		while [ $count_b -lt $num_types ]
		do
			arg_b=${atm_types:count_b:1}
			specific_atom_count_b=${atom_numbs:count_b:1}
			for (( j = 0; j < $specific_atom_count_b; j++ ))
			do
				if [[ "$i" -eq "$j" && "$arg_a" == "$arg_b" ]];
				then
					continue
				elif [[ "$j" -lt "$i" && "$arg_a" == "$arg_b" ]];
				then
					continue
				else
					atm_str="$arg_a$i, $arg_b$j"
					force_var="k_intra_$arg_a$arg_b"
					dist_var="d_intra_$arg_a$arg_b"
		
					echo "    x[$basis_index] = v_intra($force_var, $dist_var, $atm_str);" >> x1b_v1x_cpp_head
					basis_index=$((basis_index + 1))	
				fi
			done
			count_b=$(( count_b + 1 ))
		done
	done
	count_a=$(( count_a + 1 ))
done

echo "    double retval = poly_1b_v1x::eval(m_coeffs, x); " >> x1b_v1x_cpp_head
echo "    return retval; " >> x1b_v1x_cpp_head
echo "}" >> x1b_v1x_cpp_head
echo " " >> x1b_v1x_cpp_head
echo "//----------------------------------------------------------------------------//" >> x1b_v1x_cpp_head
echo " " >> x1b_v1x_cpp_head
echo "double x1b_v1x::operator()(const double* w1, double* g1) const" >> x1b_v1x_cpp_head
echo "{" >> x1b_v1x_cpp_head

type_index=0
atom_index=0

for arg in $atom_types
do
	specific_atom_count=${atom_numbs:$type_index:1}
	for (( i = 0; i < $specific_atom_count; i++ ))
	do
		label="$arg""$i"
		displacement=`echo " $atom_index * 3 " | bc -l`
		echo "    const double* $label = w1 + $displacement;" >> x1b_v1x_cpp_head
		atom_index=$(( atom_index+1 ))
	done
	type_index=$(( type_index+1 ))
done

echo "    double x[$basis_count];" >> x1b_v1x_cpp_head

echo "operator() in x1b-v1x.cpp halfway done with grads"

# fill in the basis functions for x

basis_index=0
count_a=0

for arg_a in $atom_types
do
	specific_atom_count_a=${atom_numbs:count_a:1}
	for (( i = 0; i < $specific_atom_count_a; i++ ))
	do
		count_b=$count_a
		while [ $count_b -lt $num_types ]
		do
			arg_b=${atm_types:count_b:1}
			specific_atom_count_b=${atom_numbs:count_b:1}
			for (( j = 0; j < $specific_atom_count_b; j++ ))
			do
				if [[ "$i" -eq "$j" && "$arg_a" == "$arg_b" ]];
				then
					continue
				elif [[ "$j" -lt "$i" && "$arg_a" == "$arg_b" ]];
				then
					continue
				else
					atm_str="$arg_a$i, $arg_b$j"
					force_var="k_intra_$arg_a$arg_b"
					dist_var="d_intra_$arg_a$arg_b"
		
					echo "    x[$basis_index] = v_intra($force_var, $dist_var, $atm_str);" >> x1b_v1x_cpp_head
					basis_index=$((basis_index + 1))	
				fi
			done
			count_b=$(( count_b + 1 ))
		done
	done
	count_a=$(( count_a + 1 ))
done

echo "    double g[$basis_count];" >> x1b_v1x_cpp_head
echo "    double retval = poly_1b_v1x::eval(m_coeffs, x, g); " >> x1b_v1x_cpp_head

type_index=0
atom_index=0

for arg in $atom_types
do
	specific_atom_count=${atom_numbs:$type_index:1}
	for (( i = 0; i < $specific_atom_count; i++ ))
	do
		label="g$arg""$i"
		displacement=`echo " $atom_index * 3 " | bc -l`
		echo "    double* $label = g1 + $displacement;" >> x1b_v1x_cpp_head
		atom_index=$(( atom_index+1 ))
	done
	type_index=$(( type_index+1 ))
done

# fill in the basis functions for g

basis_index=0
count_a=0

for arg_a in $atom_types
do
	specific_atom_count_a=${atom_numbs:count_a:1}
	for (( i = 0; i < $specific_atom_count_a; i++ ))
	do
		count_b=$count_a
		while [ $count_b -lt $num_types ]
		do
			arg_b=${atm_types:count_b:1}
			specific_atom_count_b=${atom_numbs:count_b:1}
			for (( j = 0; j < $specific_atom_count_b; j++ ))
			do
				if [[ "$i" -eq "$j" && "$arg_a" == "$arg_b" ]];
				then
					continue
				elif [[ "$j" -lt "$i" && "$arg_a" == "$arg_b" ]];
				then
					continue
				else
					atm_str="$arg_a$i, $arg_b$j"
					grd_str="g$arg_a$i, g$arg_b$j"
					force_var="k_intra_$arg_a$arg_b"
					dist_var="d_intra_$arg_a$arg_b"
		
					echo "    g_intra(g[$basis_index], $force_var, $dist_var, $atm_str, $grd_str);" >> x1b_v1x_cpp_head
					basis_index=$((basis_index + 1))	
				fi
			done
			count_b=$(( count_b + 1 ))
		done
	done
	count_a=$(( count_a + 1 ))
done
echo "    return retval;" >> x1b_v1x_cpp_head
echo "}" >> x1b_v1x_cpp_head
echo " " >> x1b_v1x_cpp_head
echo "//----------------------------------------------------------------------------//" >> x1b_v1x_cpp_head
echo " " >> x1b_v1x_cpp_head

echo "void x1b_v1x::load_poly_dat(const char* fn)" >> x1b_v1x_cpp_head
echo "{" >> x1b_v1x_cpp_head
echo "    assert(fn); " >> x1b_v1x_cpp_head
echo "    std::ifstream infile(fn);" >> x1b_v1x_cpp_head
echo "    std::string line;" >> x1b_v1x_cpp_head
echo "    bool polynomial_flag = false;" >> x1b_v1x_cpp_head
echo "    while (std::getline(infile, line)) " >> x1b_v1x_cpp_head
echo "    {" >> x1b_v1x_cpp_head
echo "        std::string identifier;">> x1b_v1x_cpp_head
echo "        std::istringstream iss(line); " >> x1b_v1x_cpp_head
echo "        iss >> identifier; " >> x1b_v1x_cpp_head

for arg in $nonlinear_d_params
do
	echo "        if (identifier == \"$arg\") iss >> $arg;" >> x1b_v1x_cpp_head
done

for arg in $nonlinear_k_params
do
	echo "        if (identifier == \"$arg\") iss >> $arg;" >> x1b_v1x_cpp_head
done

echo "        if (polynomial_flag == true){" >> x1b_v1x_cpp_head
echo "            int poly_num; " >> x1b_v1x_cpp_head
echo "            iss >> poly_num; " >> x1b_v1x_cpp_head
echo "            std::istringstream identifier_to_poly(identifier); " >> x1b_v1x_cpp_head
echo "            identifier_to_poly >> m_coeffs[poly_num]; " >> x1b_v1x_cpp_head
echo "            if (poly_num == ncoeffs - 1) polynomial_flag = false;" >> x1b_v1x_cpp_head
echo "        }" >> x1b_v1x_cpp_head
echo "        if (polynomial_flag == false && identifier == \"polynomials:\") polynomial_flag = true; " >> x1b_v1x_cpp_head
echo "    }" >> x1b_v1x_cpp_head
echo "}" >> x1b_v1x_cpp_head
echo " " >> x1b_v1x_cpp_head
echo "//----------------------------------------------------------------------------//" >> x1b_v1x_cpp_head
echo " " >> x1b_v1x_cpp_head
echo "}" >> x1b_v1x_cpp_head
mv x1b_v1x_cpp_head x1b-v1x.cpp
# change initial nonlinear parameter guesses in fitting code
head -150 fit-1b-polynomials.cpp > fit_head
tail -179 fit-1b-polynomials.cpp > fit_tail

echo "    const double x0[] = { " >> fit_mid

for (( i = 0; i < $num_nonlin_params; i++ ))
do
	echo "        1.0," >> fit_mid
done

echo "        2.0" >> fit_mid
echo "    };" >> fit_mid

cat fit_head fit_mid fit_tail > fit-1b-polynomials.cpp
rm fit_head fit_mid fit_tail



# last step-compile the code, hope it works!
make

